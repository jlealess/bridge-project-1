{"version":3,"sources":["modules/TextField.js","modules/Button.js","constants.js","setup/keys.js","modules/Login/Login.js","modules/Login/Login.actions.js","modules/Event.js","modules/ToggleContainer.js","modules/EventList.js","modules/FollowingList.js","modules/UserProfile.js","modules/Profile/Profile.actions.js","modules/Profile/Profile.js","modules/AppHeader.js","modules/App.js","store.js","serviceWorker.js","index.js"],"names":["TextField","_ref","value","handleChange","label","id","name","react_default","a","createElement","Fragment","htmlFor","className","type","onChange","Button","handleClick","onClick","APP_ACTIONS","accessToken","concat","Login","_this$props","this","props","username","loginErrorMessage","handleChangeUsername","loginUser","src","alt","modules_TextField","required","modules_Button","React","Component","mapDispatchToProps","e","payload","target","dispatch","localStorage","getItem","setItem","setUserInLocalStorage","fetch","getGithubUser","then","res","json","profile","handleLogin","setUserFromLocalStorage","connect","state","Event","date","event","status","href","repo","url","title","forkee","clone_url","full_name","updated_at","created_at","Date","toLocaleDateString","year","month","day","ToggleContainer","toggleForkEventsFilter","togglePullRequestEventsFilter","filters","ForkEvent","PullRequestEvent","EventList","events","modules_ToggleContainer","length","filter","map","i","key","modules_Event","FollowingList","followers","follower","html_url","avatar_url","login","UserProfile","avatarUrl","handleLogout","modules_FollowingList","handleSetEvents","Profile","fetchEvents","fetchFollowers","followersUrl","modules_UserProfile","modules_EventList","eventsUrl","data","pull_request","Object","objectSpread","Promise","all","toConsumableArray","saveFollowers","followers_url","AppHeader","loggedIn","modules_AppHeader","modules_Profile_Profile","modules_Login_Login","INITIAL_APP_STATE","createStore","arguments","undefined","action","window","__REDUX_DEVTOOLS_EXTENSION__","applyMiddleware","thunk","Boolean","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","es","store","modules_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3ea8c2b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TextField = ({ value, handleChange, label, id, name }) => (\n    <React.Fragment>\n        <label htmlFor={id} className=\"form__label\">{label}</label>\n        <input\n            type=\"text\"\n            value={value}\n            onChange={handleChange}\n            name={name}\n            id={id}\n            className=\"form__input\"\n        />\n    </React.Fragment>\n);\n\nexport default TextField;\n","import React from \"react\";\n\nconst Button = ({ handleClick, className, value }) => (\n    <button onClick={handleClick} className={className}>{value}</button>\n);\n\nexport default Button;","export const APP_ACTIONS = {\n  FETCH_FOLLOWERS: \"app/FETCH_FOLLOWERS\",\n  SET_LOGIN_ERROR: \"app/SET_LOGIN_ERROR\",\n  SET_USERNAME: \"app/SET_USERNAME\",\n  SET_EVENTS: \"app/SET_EVENTS\",\n  TOGGLE_FORK_EVENTS: \"app/TOGGLE_FORK_EVENTS\",\n  TOGGLE_PULL_REQUEST_EVENTS: \"app/TOGGLE_PULL_REQUEST_EVENTS\",\n  USER_LOGIN: \"app/USER_LOGIN\",\n  USER_LOGOUT: \"app/USER_LOGOUT\"\n};\n","export const apiKey = \"cf4c65ea084d892abe97b61e33a6bf2a2be32033\";\n\nexport const accessToken = `?access_token=${apiKey}`;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport TextField from \"../TextField.js\";\nimport Button from \"../Button.js\";\nimport {\n  handleChangeUsername,\n  setUserFromLocalStorage,\n  loginUser,\n} from \"./Login.actions\";\n\nclass Login extends React.Component {\n    // componentDidMount() {\n    //     if (\n    //         localStorage.getItem(\"ghDevLoggedIn\") && localStorage.getItem(\"ghDevUsername\")\n    //     ) {\n    //         const username = localStorage.getItem(\"ghDevUsername\");\n    //         this.props.setUserFromLocalStorage(username);\n    //         this.props.loginUser(username);\n    //     }\n    // }\n\n  render() {\n    const { username, loginErrorMessage, handleChangeUsername, loginUser } = this.props;\n    return (\n      <div className=\"login\">\n        <img\n          src=\"./assets/cat-avatar.jpg\"\n          alt=\"GitHub Developer\"\n          className=\"logo img img--rounded\"\n        />\n        <h2 className=\"heading heading--light heading--centered\">\n          Welcome!\n          <br /> Enter your GitHub username to login\n        </h2>\n        <div className=\"form form--login\">\n          <TextField\n            name=\"username\"\n            handleChange={handleChangeUsername}\n            id=\"github-username\"\n            label=\"Username\"\n            value={username}\n            required=\"true\"\n          />\n          <Button\n            value=\"Login\"\n            handleClick={() => loginUser(username)}\n            className=\"full-width primary\"\n          />\n          <p className=\"error\">{loginErrorMessage}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n    username: state.username,\n    loginErrorMessage: state.loginErrorMessage\n});\n\nconst mapDispatchToProps = {\n    handleChangeUsername,\n    loginUser,  \n    setUserFromLocalStorage,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Login);","import { APP_ACTIONS } from \"../../constants\";\nimport { accessToken } from \"../../setup/keys\";\n\nconst getGithubUser = username => {\n  return fetch(`https://api.github.com/users/${username}${accessToken}`);\n};\n\nconst handleLoginError = () => ({\n  type: APP_ACTIONS.SET_LOGIN_ERROR,\n  payload: \"Please enter a GitHub username\"\n});\n\nconst setUserInLocalStorage = username => {\n  localStorage.setItem(\"ghDevUsername\", username);\n  localStorage.setItem(\"ghDevLoggedIn\", true);\n};\n\nexport const handleChangeUsername = e => ({\n  type: APP_ACTIONS.SET_USERNAME,\n  payload: e.target.value\n});\n\nexport const handleLogin = profile => ({\n  type: APP_ACTIONS.USER_LOGIN,\n  payload: profile\n});\n\nexport const setUserFromLocalStorage = username => ({\n  type: APP_ACTIONS.SET_USERNAME,\n  payload: username\n});\n\nexport const loginUser = username => dispatch => {\n  if (!localStorage.getItem(\"ghDevUsername\")) {\n    setUserInLocalStorage(username);\n  }\n  if (username) {\n    getGithubUser(username)\n      .then(res => res.json())\n      .then(profile => dispatch(handleLogin(profile)))\n  } else {\n      dispatch(handleLoginError());\n  }\n};\n","import React from 'react';\n\nconst date = date => {\n  const updatedDate = new Date(date);\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  return updatedDate.toLocaleDateString(\"en-US\", options);\n};\n\nconst Event = ({ event }) => (\n  <div className=\"card card--event\">\n    <p className=\"event__type\">{event.type === \"ForkEvent\" ? \"Fork\" : \"Pull Request\"}</p>\n    {event.status && (\n      <p className={`event__status event__status--${event.status}`}>\n        {event.status}\n      </p>\n    )}\n    <p>\n      <a href={event.repo.url} className=\"event__link\">\n        {event.repo.name}\n      </a>\n    </p>\n    <p className=\"event__title\">{event.title}</p>\n    {event.type === \"ForkEvent\" && (\n        <p>Forked to <a href={event.payload.forkee.clone_url}>\n            {(event.payload.forkee.full_name)}\n        </a>\n        </p>\n    )}    \n    <p className=\"event__date\">\n      Updated {date(event.updated_at ? event.updated_at : event.created_at)}\n    </p>\n  </div>\n);\n\nexport default Event;","import React from 'react';\nimport Button from './Button';\n\nconst ToggleContainer = ({\n    toggleForkEventsFilter,\n    togglePullRequestEventsFilter,\n    filters\n}) => (\n    <div className=\"toggle-container\">\n        <p className=\"toggle-container__label\">\n            Filter:\n        </p>\n        <Button\n            value=\"Toggle Fork Events\"\n            handleClick={toggleForkEventsFilter}\n            className={`filter-toggle ${filters.ForkEvent ? \"filter-toggle--active\" : \"filter-toggle--inactive\"}`}\n        />\n        <Button\n            value=\"Toggle Pull Request Events\"\n            handleClick={togglePullRequestEventsFilter}\n            className={`filter-toggle ${filters.PullRequestEvent ? \"filter-toggle--active\" : \"filter-toggle--inactive\"}`}\n        />\n    </div>\n);\n\nexport default ToggleContainer;","import React from \"react\";\nimport Event from \"./Event\";\nimport ToggleContainer from './ToggleContainer';\n\nconst EventList = ({\n  events,\n  filters,\n  toggleForkEventsFilter,\n  togglePullRequestEventsFilter\n}) => (\n  <div className=\"events\">\n    <h2>Recent activity</h2>\n    <ToggleContainer\n        toggleForkEventsFilter={toggleForkEventsFilter}\n        togglePullRequestEventsFilter={togglePullRequestEventsFilter}\n        filters={filters}\n    />\n    {events.length ? (\n      <ul className=\"events__list\">\n        {events.filter(event => filters[event.type]).length ? events.filter(event => filters[event.type]).map((event, i) => {\n          return (\n            <li key={event.id} className=\"events__list__item\">\n              <Event event={event} />\n            </li>\n          );\n        }) : <p>Whoops, no events match your criteria!</p>}\n      </ul>\n    ) : (\n      <p>Sorry, this user has no active repos.</p>\n    )}\n  </div>\n);\n\nexport default EventList;","import React from \"react\";\n\nconst FollowingList = ({ followers }) => (\n    <div className=\"followers\">\n        <h2>My followers</h2>\n        <ul className=\"followers__list\">\n            {followers.length ? followers.map((follower, i) => (\n                <li key={follower.id} className=\"follower\">\n                    <a href={follower.html_url}>\n                        <img src={follower.avatar_url} alt={`${follower.login}'s avatar`} className=\"follower__avatar\" />\n                    </a>\n                </li>\n            )) : <p>No followers yet</p>}\n        </ul>\n    </div>\n);\n\nexport default FollowingList;\n","import React from 'react';\nimport Button from './Button';\nimport FollowingList from './FollowingList';\n\nconst UserProfile = ({\n    avatarUrl,\n    username,\n    handleLogout,\n    followers\n}) => (\n    <div className=\"user\">\n        <div className=\"user__info\">\n            <img src={avatarUrl ? avatarUrl : \"./assets/user-avatar.png\"} alt={username ? username : \"\"} className=\"profile__avatar\" />\n            <h2 className=\"heading heading--light heading--secondary mb-0\">Hello, {username}</h2>\n            <Button\n                handleClick={handleLogout}\n                value=\"Logout\"\n                className=\"full-width\"\n            />\n        </div>\n        <FollowingList followers={followers} />\n    </div>\n);\n\nexport default UserProfile;","import { APP_ACTIONS } from \"../../constants\";\nimport { accessToken } from \"../../setup/keys\";\n\nconst saveFollowers = followers => ({\n    type: APP_ACTIONS.FETCH_FOLLOWERS,\n    payload: followers\n});\n\nexport const fetchEvents = eventsUrl => dispatch => {\n    return fetch(eventsUrl)\n        .then(res => res.json())\n        .then(events => {\n            return events.filter(\n                event => event.type === \"ForkEvent\" || event.type === \"PullRequestEvent\"\n            )\n        }).then(data => {\n            const events = data.map(event => {\n                if (event.type === \"PullRequestEvent\") {\n                    return fetch(event.payload.pull_request.url)\n                        .then(res => res.json())\n                        .then(data => ({ ...event, status: data.state, title: data.title }))\n                } else {\n                    return event\n                }\n            });\n            Promise.all([...events]).then(events => dispatch(handleSetEvents(events)));\n        })\n};\n\nexport const fetchFollowers = followersUrl => dispatch => {\n    return fetch(`${followersUrl}${accessToken}`)\n        .then(res => res.json())\n        .then(followers => dispatch(saveFollowers(followers)));\n};\n\nexport const handleLogout = () => {\n    localStorage.setItem(\"ghDevLoggedIn\", false);\n    return {\n        type: APP_ACTIONS.USER_LOGOUT\n    };\n};\n\nexport const handleSetEvents = events => ({\n    type: APP_ACTIONS.SET_EVENTS,\n    payload: events\n});\n\nexport const toggleForkEventsFilter = () => ({\n    type: APP_ACTIONS.TOGGLE_FORK_EVENTS\n});\n\nexport const togglePullRequestEventsFilter = () => ({\n    type: APP_ACTIONS.TOGGLE_PULL_REQUEST_EVENTS\n});","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport EventList from \"../EventList\";\nimport UserProfile from \"../UserProfile\";\nimport {\n  fetchEvents,\n  fetchFollowers,\n  handleLogout,\n  toggleForkEventsFilter,\n  togglePullRequestEventsFilter\n} from \"./Profile.actions\";\n\nclass Profile extends React.Component {\n  componentDidMount() {\n      this.props.fetchEvents(`https://api.github.com/users/${this.props.username}/events`);\n      this.props.fetchFollowers(this.props.followersUrl);\n  }\n\n  render() {\n    const { avatarUrl, username, followers, events, filters, handleLogout, toggleForkEventsFilter, togglePullRequestEventsFilter } = this.props;\n    return (\n      <div className=\"profile\">\n        <UserProfile\n          avatarUrl={avatarUrl}\n          username={username}\n          handleLogout={handleLogout}\n          followers={followers}\n        />\n        <EventList\n          events={events}\n          filters={filters}\n          toggleForkEventsFilter={toggleForkEventsFilter}\n          togglePullRequestEventsFilter={togglePullRequestEventsFilter}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  avatarUrl: state.profile.avatar_url,\n  events: state.events,\n  filters: state.filters,\n  followers: state.followers,\n  followersUrl: state.profile.followers_url,\n  username: state.username,\n});\n\nconst mapDispatchToProps = {\n  fetchEvents,\n  fetchFollowers,\n  handleLogout,\n  toggleForkEventsFilter,\n  togglePullRequestEventsFilter\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Profile);\n","import React from 'react';\n\nconst AppHeader = () => (\n    <div className=\"App-header\">\n        <div className=\"wrapper\">\n            <img src=\"./assets/cat-avatar.jpg\" alt=\"\" className=\"App-header__logo\" />\n            <h1 className=\"heading heading--main\">Github Developer</h1>\n        </div>\n    </div>\n)\n\nexport default AppHeader;","import React from 'react';\nimport { connect } from \"react-redux\";\nimport '../App.css';\nimport Login from \"./Login/Login.js\";\nimport Profile from \"./Profile/Profile.js\";\nimport AppHeader from './AppHeader';\n\nconst App = ({ loggedIn }) => (\n  <div className=\"App\">\n         <AppHeader />\n         <div className=\"App-body wrapper\">\n          {loggedIn ? <Profile /> : <Login />} \n        </div>\n      </div>\n);\n\nconst mapStateToProps = state => ({\n  loggedIn: state.loggedIn\n});\n\nexport default connect(\n  mapStateToProps,\n  // mapDispatchToProps\n)(App);","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { APP_ACTIONS } from \"./constants\";\n\nconst INITIAL_APP_STATE = {\n    username: \"\",\n    profile: {},\n    followers: [],\n    events: [],\n    loggedIn: false,\n    loginErrorMessage: \"\",\n    filters: {\n        ForkEvent: true,\n        PullRequestEvent: true,\n    }\n}\n\nconst rootReducer = (state = INITIAL_APP_STATE, action) => {\n    switch(action.type) {\n        case APP_ACTIONS.FETCH_FOLLOWERS: {\n            return {\n                ...state,\n                followers: action.payload\n            }\n        }\n        case APP_ACTIONS.SET_EVENTS: {\n            return {\n                ...state,\n                events: action.payload\n            }\n        }\n        case APP_ACTIONS.SET_LOGIN_ERROR: {\n            return {\n                ...state,\n                loginErrorMessage: action.payload,\n            }\n        }\n        case APP_ACTIONS.SET_USERNAME: {\n            return {\n                ...state,\n                loginErrorMessage: \"\",\n                username: action.payload,\n            }\n        }\n        case APP_ACTIONS.TOGGLE_FORK_EVENTS: {\n            return {\n                ...state,\n                filters: {...state.filters, ForkEvent: !state.filters.ForkEvent }\n            }\n        }\n        case APP_ACTIONS.TOGGLE_PULL_REQUEST_EVENTS: {\n            return {\n                ...state,\n                filters: { ...state.filters, PullRequestEvent: !state.filters.PullRequestEvent }\n            }\n        }\n        case APP_ACTIONS.USER_LOGIN: {\n            return {\n                ...state,\n                loggedIn: true,\n                loginErrorMessage: \"\",\n                profile: action.payload\n            }\n        }\n        case APP_ACTIONS.USER_LOGOUT: {\n            return {\n                ...state,\n                profile: {},\n                loggedIn: false\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n} \n\nexport default createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n    applyMiddleware(thunk),\n);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './modules/App';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}